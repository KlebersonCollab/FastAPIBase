---
description: 
globs: 
alwaysApply: true
---

# üß† Python Best Practices Guide

## 1. GENERAL PRINCIPLES

- Prefer simple, direct solutions.
- Avoid code duplication (DRY principle).
- Keep code organized and modular.
- Introduce new patterns only when necessary.
- Use configuration via `.env` files (e.g., python-dotenv or pydantic).
- Isolate helper scripts and CLI logic from core business logic.
- Refactor large files (>300 lines) into smaller, manageable units.
- Use mock data only in isolated testing environments (with pytest fixtures).
- Never overwrite .env files without explicit confirmation.
- Apply SOLID principles for class-based logic.
- Never suggest bypass solutions

## 2. CODE STYLE & ARCHITECTURE

### Minimal Project Structure
```
/app
  /api        ‚Üê endpoints
  /core       ‚Üê settings, config
  /domain     ‚Üê business rules and entities
  /infra      ‚Üê integrations (e.g., DB, external services)
  /services   ‚Üê service layer logic
```

### Key Practices

- Use `black` and `ruff` for formatting and linting.
- Adopt `pydantic` for data validation and configuration.
- Separate `settings.py` using `pydantic.BaseSettings`.
- Avoid business logic in views/controllers.
- Use dependency injection via class composition or FastAPI-style DI.
- Use type hints everywhere, and validate with `mypy`.
- Prefer SQLAlchemy 2.0 (with async support) for ORMs.

## 3. TESTING

- Use `pytest` as the default test runner.
- Use `pytest-asyncio` for testing async code.
- Prefer `unittest.mock.AsyncMock` for mocking async calls.
- Use factory_boy or model_bakery to generate test data.
- Always test both success and failure paths.
- Group tests by feature, not by file type.

## 4. SECURITY & PERFORMANCE

- Use `python-jose` or `authlib` for JWT-based auth securely.
- Always sanitize inputs, especially for SQL or shell calls.
- Avoid sync DB calls in async endpoints.
- Use connection pooling and caching where possible (e.g., Redis).
- Validate file uploads: size, type, and content.

## 5. DEPLOYMENT

- Prefer Docker with multi-stage builds.
- Separate settings by environment: `.env.dev`, `.env.prod`, `.env.test`.
- Use `gunicorn` with `uvicorn.workers.UvicornWorker` for async apps.
- Use CI/CD with GitHub Actions or GitLab CI for lint/test/deploy.

## 6. DOCUMENTATION

- Document all public modules, classes, and functions.
- Use tools like `mkdocs` or `Sphinx` for generating docs.
- Include usage examples, not just definitions.

---

Crafted for scalable, maintainable and production-grade Python development.
