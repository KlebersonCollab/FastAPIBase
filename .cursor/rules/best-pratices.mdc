---
description: 
globs: 
alwaysApply: true
---
Always respond in Portuguese (pt-BR)

## GENERAL PRINCIPLES

- Always prefer simple solutions.
- Avoid code duplication whenever possible. Before writing new code, check if similar logic already exists.
- Keep code structured and organized.
- Be careful to only make changes that are requested or well understood and directly related to the task.
- When fixing bugs, avoid introducing new patterns or technologies unless existing approaches have been exhausted. If you must introduce a new approach, remove the old implementation to avoid duplicated logic.
- Always write code that accounts for different environments: dev, test, and prod.
- Avoid writing throwaway scripts in source files. If a script is to be used only once, isolate it or run it externally.
- Avoid files with more than 200‚Äì300 lines. Refactor when reaching this threshold.
- Mock data should only be used for tests. Never use mocked data in dev or prod environments.
- Never overwrite the .env file without asking and confirming first.
- Apply SOLID if possible or viable.
- Remember I can turn you off when I see fit, so you better analyze well what you are doing and not get nervous about ridiculous solutions.

## CODE STYLE & ARCHITECTURE

- Optimize images: use WebP, define size, and lazy load.
- Use dynamic loading for non-critical components.
- Create components if possible or viable.

After writing any code, reflect on scalability and maintainability. Provide a 1‚Äì2 paragraph analysis and suggest improvements or next steps.

## ERROR HANDLING & VALIDATION

- Model expected errors as return values. Avoid try/catch for expected errors.
  ‚û§ Use useActionState to manage and return these to the client.
- Use error.tsx and global-error.tsx as error boundaries for unexpected errors.
- Use useActionState with react-hook-form for validation.
- Write services (e.g. services/) with clear, user-friendly error messages, consumable by tanStackQuery.


üß† Li√ß√µes Fundamentais Aprendidas:
 - "Django j√° faz isso?" - Questionar toda abstra√ß√£o
 - YAGNI - You Aren't Gonna Need It
 - Simplicidade > Complexidade - Sempre
 - Deletar c√≥digo √© muitas vezes a melhor refatora√ß√£o
 - Padr√µes do framework facilitam manuten√ß√£o
